String[] shoppinglist;
.
.
.
int noListItems = ~~~
shoppingList = new String[noListItems];
.
.
.
shoppingList2 = shoppingList;
shoppingList[0] = "pizza"; #Adds "pizza" to index 0 of the array
System.out.println(shoppingList2[0]); #should print out nothing as this is empty
shoppingList2 = new String[shoppingList.length];
for (int = 0; i< shoppingList.length; i++)  {
    shoppingList2[i] = shoppingList[i];
    #another way to do in
    #shoppingList2[i++] = next;
} #copies shoppingList into shoppingList2
shoppingList2[0] = "burger";
}

_______________________________________________________

public class Person {
    private String lname;
    private String fname;
    public Person(String lname, String fname)   {
        this.lname = lname;
        this.fname = fname;
    }
    public void setFname(String newName)    {
        this.fname = newName;
    }
    public Person(Person Other) {
        this.fname = Other.fname;
        this.lname = Other.lname;
    }
}


Person[] myfriends = new Person[10];
myfriends = new Person("Rutz", "Mike");
Person[] yourfriends = new Person[10];
#yourfriends[0] = new Person["Rutz", "Mike"];
#instead let's do this:
yourfriends[0] = myfriends[0]; #creates not one but 2 pointers to the same object in the memory

_______________________________________________________

Array Lists 

import java.util.ArrayList;

ArrayList<String> shoppingList = newArrayList<String>(); #newArrayList<>(); also works ##() = the size; if empty it can change; you can put in a number however, like 100 to set it to size 100
#ArrayList<> needs a wrapper; examples would be <Integer>, <Character> instead of using primitives like int/char 
#wrapper tells the compiler "Make me an array list class of this order

shoppingList.add(String)
            .add(index, String) #places string right after the index
            .get(index)
int whereCucumber = shoppingList.indexOf("cucumber");
remove(index)
    .remove(integer. value)
    .set(index, value)
    .size() #needs the () because it's invoking size() for array list 

#Array List are very flexible; expands on command whenever we need it to
#Don't need to know size before we use it 
#Arrays are faster than ArrayLists and uses less space